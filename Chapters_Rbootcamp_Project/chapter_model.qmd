---
editor: 
  markdown: 
    wrap: 72
---

## Chapter 'fitting a linear regression model and visualize it'

### Data preparation and correlations

```{r echo=FALSE, message=FALSE}

library(tidyverse)
library(corrplot)
library(patchwork)

trends_combined <- read.csv("trends_combined_wide.csv")

## Prepare data
lm_data <- trends_combined %>%
  select(date, country, iPhone) %>% 
  pivot_wider(names_from = country, values_from = iPhone, names_prefix = "iPhone_")

```

### Check all correlations

```{r}
## Calculate the correlation coefficients
correlation_matrix <- lm_data %>%
  select(where(is.numeric)) %>%
  cor(use = "complete.obs")

## Look at the correlations
corrplot(correlation_matrix, method = "number", type = "upper",
         tl.col = "black", tl.srt = 45, mar = c(1, 0, 1, 0))

```

### Fitting a linear model

```{r}

## Fit the linear regression model and show a summary
model <- lm(iPhone_DE ~ iPhone_US, data = lm_data)
summary(model)

```

### Visualize the linear regression in a scatter plot

```{r, message=FALSE}

# Add fitted values & residuals
lm_data$fitted <- fitted(model)
lm_data$residuals <- residuals(model)

# Extract coefficients for regression line
coef_intercept <- coef(model)[1]
coef_slope <- coef(model)[2]

## Scatterplot with regression line (from model)
plot_1 <- ggplot(lm_data, aes(x = iPhone_US, y = iPhone_DE)) +
  geom_point(alpha = 0.7, size = 2, color = "darkblue") +
  geom_abline(
    aes(intercept = 0, slope = 1, color = "Perfect Correlation (y = x)"),
    linetype = "dashed", alpha = 0.7) +
  geom_abline(
    aes(intercept = coef_intercept, slope = coef_slope, color = "Regression Line"),
    size = 1) +
  scale_color_manual(
    name = "Reference line:",
    values = c("Perfect Correlation (y = x)" = "red",
               "Regression Line" = "blue")) +
  labs(
    title = "Google searches Germany vs USA", ,
    x = "iPhone USA",
    y = "iPhone Germany",
    caption = "Source: Google Trends. Each point represents a day from 2017-11-14 to 2018-06-14.") +
  theme_minimal() +
  theme(legend.position = "bottom"
  )

## Residuals vs Fitted
plot_2 <- ggplot(lm_data, aes(fitted, residuals)) +
  geom_point(alpha = 0.7, color = "darkblue") +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(title = "Residuals vs Fitted", x = "Fitted", y = "Residuals") +
  theme_minimal()

## Q-Q Plot
plot_3 <- ggplot(lm_data, aes(sample = residuals)) +
  stat_qq(alpha = 0.7, color = "darkblue") +
  stat_qq_line(color = "red") +
  labs(title = "Q-Q Plot of Residuals") +
  theme_minimal()

## Observed vs Fitted
plot_4 <- ggplot(lm_data, aes(fitted, iPhone_DE)) +
  geom_point(alpha = 0.7, color = "darkblue") +
  geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
  labs(title = "Observed vs Fitted", x = "Fitted", y = "Observed") +
  theme_minimal()

## Arrange plots
# (plot_1 | plot_2) / (plot_3 | plot_4)

plot_1
plot_2
plot_3
plot_4

```

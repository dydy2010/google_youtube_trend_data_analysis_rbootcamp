---
editor: 
  markdown: 
    wrap: 72
---

## Chapter of choice: Wordcloud

### Install packages

```{r echo=FALSE}
#  Wordcloud2.

library(ragg)
library(systemfonts)
library(textshaping)

# For RStudio >= 1.4, go to Tools > Global Options > General > Graphics and set
# the Backend to AGG.

# View(systemfonts::system_fonts())
# Test Fonts. Use family name!

library(RColorBrewer)
library(wordcloud2)
library(tidyverse)
library(stopwords)
library(webshot2)
library(htmlwidgets)

```

### Prepare the Rolex data

```{r}

# Use only videos that have Rolex in the title or in the tags
rolex_df <- all_videos %>% 
  filter(
    str_detect(title, regex("rolex", ignore_case = TRUE)) |
    str_detect(tags, regex("rolex", ignore_case = TRUE))
  )

# Aggregate by video_id (sum views, keep tags)
rolex_df_aggregated <- rolex_df %>%
  group_by(video_id, tags) %>%
  summarise(total_views = sum(views, na.rm = TRUE), .groups = "drop")

# Split tags by "|" separator (creates multiple rows per video)
rolex_tags_split <- rolex_df_aggregated %>%
  separate_rows(tags, sep = "\\|")

# Clean individual tags
rolex_tags_cleaned <- rolex_tags_split %>%
  mutate(
    # Remove leading/trailing whitespace
    tags_clean = str_trim(tags),
    # Convert to lowercase for consistency
    tags_clean = str_to_lower(tags_clean),
    # Remove extra whitespace within tags
    tags_clean = str_squish(tags_clean)
  ) %>%
  # Remove empty tags and stopwords
  filter(
    tags_clean != "",
    !tags_clean %in% stopwords("en"),
    # Remove additional words you do not want to see in the cloud, namely 'Rolex'
    !tags_clean %in% c("video", "youtube", "content", "2017", "2018", "olexesh", "rolex")
  ) %>%
  # Keep only the cleaned tags column
  select(tag = tags_clean, total_views)

# View results
# head(rolex_tags_cleaned)
# cat("Total unique clean tags:", n_distinct(rolex_tags_cleaned$tag), "\n")

# aggregate to have unique tags
rolex_tags_cleaned_unique <- rolex_tags_cleaned %>%
  group_by(tag) %>%
  summarise(total_views = sum(total_views, na.rm = TRUE)) %>%
  arrange(desc(total_views))

# View results
# head(rolex_tags_cleaned_unique, 100)
```

### Create the Rolex wordcloud

```{r}

# Define luxurious colors that match to the Rolex brand.

pal_rolex <- c("#228B22", "#0A1931", "#B09770", "#722F37", "#B36A5E", "#454545", "#006D77", "#4C3F91")

# Create the Rolex wordcloud

wc_Rolex <- wordcloud2(rolex_tags_cleaned_unique %>% filter(total_views > 100000),
           size = 0.3, rotateRatio = 0,
           minRotation = -pi/2, maxRotation = -pi/2,
           fontFamily = 'Garamond',
           fontWeight = 800,
           gridSize = 4, 
           shuffle = TRUE,
           shape = 'circle', ellipticity = 0.5,
           # color = palKH2[factor(df2$Word)])
           color = rep_len(pal_rolex, nrow(rolex_tags_cleaned_unique)))

wc_Rolex

## Export a png

## Step 1: Save as HTML in a known folder
# html_file <- "C:/Users/dhub1/Pictures/Screenshots/wordcloud_Rolex.html"
# saveWidget(wc_Rolex, file = html_file, selfcontained = TRUE)

## Step 2: Take PNG snapshot of that HTML
# png_file <- "C:/Users/dhub1/Pictures/Screenshots/wordcloud_Rolex.png"
# webshot2::webshot(html_file, png_file, vwidth = 800, vheight = 600)

```

### Prepare the iPhone data

```{r}

# Use only videos that have iphone in the title or in the tags
iphone_df <- all_videos %>% 
  filter(
    str_detect(title, regex("iphone", ignore_case = TRUE)) |
    str_detect(tags, regex("iphone", ignore_case = TRUE))
  )

# Aggregate by video_id (sum views, keep tags)
iphone_df_aggregated <- iphone_df %>%
  group_by(video_id, tags) %>%
  summarise(total_views = sum(views, na.rm = TRUE), .groups = "drop")

# Split tags by "|" separator (creates multiple rows per video)
iphone_tags_split <- iphone_df_aggregated %>%
  separate_rows(tags, sep = "\\|")

# Clean individual tags
iphone_tags_cleaned <- iphone_tags_split %>%
  mutate(
    # Remove leading/trailing whitespace
    tags_clean = str_trim(tags),
    # Convert to lowercase for consistency
    tags_clean = str_to_lower(tags_clean),
    # Remove extra whitespace within tags
    tags_clean = str_squish(tags_clean)
  ) %>%
  # Remove empty tags and stopwords
  filter(
    tags_clean != "",
    !tags_clean %in% stopwords("en"),
    # Remove additional words you do not want to see in the cloud, namely 'iPhone'
    !tags_clean %in% c("video", "youtube", "content", "2017", "2018", "iphone", "iphone x")
  ) %>%
  # Keep only the cleaned tags column
  select(tag = tags_clean, total_views)

# View results
# head(iphone_tags_cleaned)
# cat("Total unique clean tags:", n_distinct(iphone_tags_cleaned$tag), "\n")

# aggregate to have unique tags
iphone_tags_cleaned_unique <- iphone_tags_cleaned %>%
  group_by(tag) %>%
  summarise(total_views = sum(total_views, na.rm = TRUE)) %>%
  arrange(desc(total_views))

# View results
# head(iphone_tags_cleaned_unique, 100)
```

### Create the iPhone wordcloud

```{r}
# Define colors that match to Apple and specifically to the iPhone X launched 2017/2018.

pal_iphone <- c("#FF375F", "#32D74B", "#0A84FF", "#FF9F0A", "#BF5AF2", "#1D1D1F", "#E4E4E2")

# iPhone wordcloud

wc_iPhone <- wordcloud2(iphone_tags_cleaned_unique %>% filter(total_views > 500000),
           size = 0.2, rotateRatio = 0,
           minRotation = -pi/2, maxRotation = -pi/2,
           fontFamily = 'Helvetica Neue LT Std',
           fontWeight = 800,
           gridSize = 4, 
           shuffle = TRUE,
           shape = 'circle', ellipticity = 0.5,
           # color = palKH2[factor(df2$Word)])
           color = rep_len(pal_iphone, nrow(iphone_tags_cleaned_unique)))

wc_iPhone

## Export a png

## Step 1: Save as HTML in a known folder
# html_file <- "C:/Users/dhub1/Pictures/Screenshots/wordcloud_iPhone.html"
# saveWidget(wc_iPhone, file = html_file, selfcontained = TRUE)

## Step 2: Take PNG snapshot of that HTML
# png_file <- "C:/Users/dhub1/Pictures/Screenshots/wordcloud_iPhone.png"
# webshot2::webshot(html_file, png_file, vwidth = 800, vheight = 600)

```

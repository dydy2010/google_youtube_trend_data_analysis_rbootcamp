---
editor: 
  markdown: 
    wrap: 72
---

## Chapter of choice: Wordcloud

### Install packages

```{r echo=FALSE}
#  Wordcloud2.

# library(devtools)
# install_github("lchiffon/wordcloud2")  # Only 1st time on computer

# Make available Windows Fonts.

# install.packages('ragg')
library(ragg)
# install.packages('systemfonts')
library(systemfonts)
# install.packages('textshaping')
library(textshaping)

# For RStudio >= 1.4, go to Tools > Global Options > General > Graphics and set
# the Backend to AGG.

View(systemfonts::system_fonts())

# Test Fonts. Use family name!

library(RColorBrewer)
library(wordcloud2)
# library(extrafont)
library(tidyverse)
# install.packages("stopwords")
library(stopwords)
# library(openxlsx)
library(ggplot2)
ggplot(NULL, aes(0, 0)) +
  geom_text(
    aes(label = "Leelawadee UI"),
    size = 18, family = "Leelawadee UI"
)

# PDF-Tools installieren.

# install.packages("webshot")
# install.packages("htmlwidgets")

# install Ghostscript on Windows 10  # Only 1st time on computer

```

### Prepare the Rolex data

```{r}

# read data
# all_videos <- read_csv("all_videos.csv", col_names = TRUE)
# str(all_videos)
# head(all_videos)

rolex_df <- all_videos %>% 
  filter(
    str_detect(title, regex("rolex", ignore_case = TRUE)) |
    str_detect(tags, regex("rolex", ignore_case = TRUE))
  )

# Aggregate by video_id (sum views, keep tags)
rolex_df_aggregated <- rolex_df %>%
  group_by(video_id, tags) %>%
  summarise(total_views = sum(views, na.rm = TRUE), .groups = "drop")

# Split tags by "|" separator (creates multiple rows per video)
rolex_tags_split <- rolex_df_aggregated %>%
  separate_rows(tags, sep = "\\|")

# Step 3: Clean individual tags
rolex_tags_cleaned <- rolex_tags_split %>%
  mutate(
    # Remove leading/trailing whitespace
    tags_clean = str_trim(tags),
    # Convert to lowercase for consistency
    tags_clean = str_to_lower(tags_clean),
    # Remove extra whitespace within tags
    tags_clean = str_squish(tags_clean)
  ) %>%
  # Remove empty tags and stopwords
  filter(
    tags_clean != "",                                   # Remove empty tags
    !tags_clean %in% stopwords("en"),                   # Remove English stopwords
    !tags_clean %in% c("video", "youtube", "content", "2017", "2018", "olexesh", "rolex")   # Add custom stopwords
  ) %>%
  # Keep only the cleaned tags column
  select(tag = tags_clean, total_views)

# View results
head(rolex_tags_cleaned)
cat("Total unique clean tags:", n_distinct(rolex_tags_cleaned$tag), "\n")

# aggregate to have unique tags
rolex_tags_cleaned_unique <- rolex_tags_cleaned %>%
  group_by(tag) %>%
  summarise(total_views = sum(total_views, na.rm = TRUE)) %>%
  arrange(desc(total_views))

# View results
head(rolex_tags_cleaned_unique, 100)
```

### Create the Rolex wordcloud

```{r}
# Define luxurious colors that match to the Rolex brand.

pal_rolex <- c("#228B22", "#0A1931", "#B09770", "#722F37", "#B36A5E", "#454545", "#006D77", "#4C3F91")

# Create the Rolex wordcloud

wordcloud2(rolex_tags_cleaned_unique %>% filter(total_views > 100000),
           size = 0.3, rotateRatio = 0,
           minRotation = -pi/2, maxRotation = -pi/2,
           fontFamily = 'Garamond',
           fontWeight = 800,
           gridSize = 4, 
           shuffle = TRUE,
           shape = 'circle', ellipticity = 0.5,
           # color = palKH2[factor(df2$Word)])
           color = rep_len(pal_rolex, nrow(rolex_tags_cleaned_unique)))

```
### Prepare the iPhone data

```{r}

iphone_df <- all_videos %>% 
  filter(
    str_detect(title, regex("iphone", ignore_case = TRUE)) |
    str_detect(tags, regex("iphone", ignore_case = TRUE))
  )

# Aggregate by video_id (sum views, keep tags)
iphone_df_aggregated <- iphone_df %>%
  group_by(video_id, tags) %>%
  summarise(total_views = sum(views, na.rm = TRUE), .groups = "drop")

# Split tags by "|" separator (creates multiple rows per video)
iphone_tags_split <- iphone_df_aggregated %>%
  separate_rows(tags, sep = "\\|")

# Step 3: Clean individual tags
iphone_tags_cleaned <- iphone_tags_split %>%
  mutate(
    # Remove leading/trailing whitespace
    tags_clean = str_trim(tags),
    # Convert to lowercase for consistency
    tags_clean = str_to_lower(tags_clean),
    # Remove extra whitespace within tags
    tags_clean = str_squish(tags_clean)
  ) %>%
  # Remove empty tags and stopwords
  filter(
    tags_clean != "",                                   # Remove empty tags
    !tags_clean %in% stopwords("en"),                   # Remove English stopwords
    !tags_clean %in% c("video", "youtube", "content", "2017", "2018", "iphone", "iphone x")   # Add custom stopwords
  ) %>%
  # Keep only the cleaned tags column
  select(tag = tags_clean, total_views)

# View results
head(iphone_tags_cleaned)
cat("Total unique clean tags:", n_distinct(iphone_tags_cleaned$tag), "\n")

# aggregate to have unique tags
iphone_tags_cleaned_unique <- iphone_tags_cleaned %>%
  group_by(tag) %>%
  summarise(total_views = sum(total_views, na.rm = TRUE)) %>%
  mutate(total_views = total_views / 50) %>% 
  arrange(desc(total_views))

# View results
head(iphone_tags_cleaned_unique, 100)
```
```{r}
# Define colors that match to Apple and specifically to the iPhone X launched 2017/2018.

pal_iphone <- c("#FF375F", "#32D74B", "#0A84FF", "#FF9F0A", "#BF5AF2", "#1D1D1F", "#E4E4E2")

# iPhone wordcloud

wordcloud2(iphone_tags_cleaned_unique %>% filter(total_views > 500000),
           size = 0.2, rotateRatio = 0,
           minRotation = -pi/2, maxRotation = -pi/2,
           fontFamily = 'Helvetica Neue LT Std',
           fontWeight = 800,
           gridSize = 4, 
           shuffle = TRUE,
           shape = 'circle', ellipticity = 0.5,
           # color = palKH2[factor(df2$Word)])
           color = rep_len(pal_iphone, nrow(iphone_tags_cleaned_unique)))

```